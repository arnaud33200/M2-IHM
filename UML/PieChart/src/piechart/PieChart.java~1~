package piechart;

import javax.swing.JPanel;
import javax.swing.event.*;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseEvent;
import java.awt.Rectangle;
import java.awt.Cursor;

/**
 * A PieChart is a View and a Controller of a Percentage
 **/
public class PieChart extends JPanel implements ChangeListener, MouseListener, MouseMotionListener {
	private boolean iAmAdjusting = false;
	private final Percentage myModel;

        public PieChart(Percentage model) {
		super();
		addMouseListener(this);
		addMouseMotionListener(this);
		myModel = model;
		myModel.addChangeListener(this);
        }

	public void stateChanged(ChangeEvent event) {
		repaint();
	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		int centerX = this.getWidth() / 2;
		int centerY = this.getHeight() /2;
		int radius = Math.min(getWidth() - 4, getHeight() - 4) / 2;
		double angle = myModel.getValue() * 2 * Math.PI;

		g.fillOval(centerX - radius, centerY - radius, radius * 2,  radius * 2);
		g.setColor(Color.yellow);
		g.fillArc(centerX - radius, centerY - radius, radius * 2,  radius * 2, 0, (int)Math.toDegrees(angle));

		int pinX = centerX + (int)(Math.cos(angle) * radius);
		int pinY = centerY - (int)(Math.sin(angle) * radius);
		g.setColor(Color.gray.brighter());
		g.fill3DRect(pinX-4, pinY-4, 8, 8, !iAmAdjusting);
	}


	/**
	 * Test if a mouse event is inside the "Pin" that allows
	 * to change the percentage
	 */
	boolean inPin(MouseEvent ev) {
		int mouseX = ev.getX();
		int mouseY = ev.getY();
		int centerX = this.getWidth() / 2;
		int centerY = this.getHeight() /2;
		int radius = Math.min(getWidth() - 4, getHeight() - 4) / 2;
		double angle = myModel.getValue() * 2 * Math.PI;
		int pinX = centerX + (int)(Math.cos(angle) * radius);
		int pinY = centerY - (int)(Math.sin(angle) * radius);

		Rectangle r = new Rectangle();
		r.setBounds(pinX - 4, pinY - 4, 8, 8);
		return r.contains(mouseX, mouseY);
	}


	public void mouseClicked(MouseEvent e) {};
	public void mouseEntered(MouseEvent e) {};
	public void mouseExited(MouseEvent e) {};
	public void mousePressed(MouseEvent e) {
		if (inPin(e)) {
		        iAmAdjusting = true;
			setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
		        repaint();
		}
	};

	public void mouseReleased(MouseEvent e) {
		mouseMoved(e);
		iAmAdjusting = false;
		repaint();
	};

	public void mouseDragged(MouseEvent e) {
		if (iAmAdjusting) {
		        myModel.setValue(pointToPercentage(e));
		}
	};

	public void mouseMoved(MouseEvent e) {
		if (inPin(e))
			setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		else
			setCursor(Cursor.getDefaultCursor());
	};

	/**
	 * Converts a mouse position to a Percentage value
	 */
	float pointToPercentage(MouseEvent e) {
		        int centerX = this.getWidth() / 2;
			int centerY = this.getHeight() /2;
			int mouseX = e.getX() - centerX;
	        	int mouseY = e.getY() - centerY;
			double l = Math.sqrt(mouseX*mouseX  + mouseY * mouseY);
		        double lx = mouseX / l;
		        double ly = mouseY / l;
		        double theta;
		        if (lx > 0)
				theta = Math.atan(ly / lx);
		        else if (lx < 0)
				theta = -1 * Math.atan(ly / lx);
		        else
		                theta = 0;

		        if ( (mouseX > 0) && (mouseY < 0) )
				theta = -1 * theta;
		        else if ( mouseX < 0)
				theta += Math.PI ;
		        else
				theta = 2*Math.PI - theta;

		        return (float)(theta / (2*Math.PI));
	}
}