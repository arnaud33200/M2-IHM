<?xml version="1.0" encoding="UTF-8"?><fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" font-family="serif,Symbol,ZapfDingbats" font-size="10pt" text-align="justify" line-height="normal" font-selection-strategy="character-by-character" line-height-shift-adjustment="disregard-shifts" writing-mode="lr-tb" language="en"><fo:layout-master-set><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="blank" margin-left="1in" margin-right="1in"><fo:region-body margin-top="0.5in" margin-bottom="0.5in" display-align="center" margin-left="0in" margin-right="0in" region-name="blank-body"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-blank"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-blank"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-blank" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-blank" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="titlepage-first" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-first"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="titlepage-odd" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-odd"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="titlepage-even" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-even"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="lot-first" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-first"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="lot-odd" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-odd"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="lot-even" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-even"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="front-first" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-first"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="front-odd" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-odd"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="front-even" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-even"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="body-first" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-first"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="body-odd" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-odd"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="body-even" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-even"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="back-first" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-first"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="back-odd" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-odd"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="back-even" margin-left="1in" margin-right="1in"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-even"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="index-first" margin-left="1in" margin-right="1in"><fo:region-body column-count="2" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-first"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-first" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-first" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="index-odd" margin-left="1in" margin-right="1in"><fo:region-body column-count="2" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-odd"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-odd" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-odd" precedence="false" extent="0in"/></fo:simple-page-master><fo:simple-page-master margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="index-even" margin-left="1in" margin-right="1in"><fo:region-body column-count="2" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" margin-left="0in" margin-right="0in"/><fo:region-before display-align="before" precedence="true" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" precedence="true" extent="0.4in" region-name="xsl-region-after-even"/><fo:region-start border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-outer-even" precedence="false" extent="0in"/><fo:region-end border-width="0" padding="0" reference-orientation="90" region-name="xsl-region-inner-even" precedence="false" extent="0in"/></fo:simple-page-master><fo:page-sequence-master master-name="titlepage"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="titlepage-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="titlepage-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="titlepage-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="lot"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="lot-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="lot-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="lot-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="front"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="front-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="front-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="front-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="body"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="body-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="body-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="body-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="back"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="back-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="back-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="back-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="index"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="index-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="index-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="index-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master></fo:layout-master-set><fo:page-sequence xmlns:axf="http://www.antennahouse.com/names/XSL/Extensions" master-reference="body" hyphenate="true" language="en" format="1" initial-page-number="1" force-page-count="no-force" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2"><fo:static-content flow-name="xsl-region-before-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="start" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="start" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block>NT02-819 (c) CENA</fo:block></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="start" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block>NT02-819 (c) CENA</fo:block></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="start" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader color="black" leader-pattern="rule" leader-length="1in"/></fo:block></fo:static-content><fo:static-content flow-name="blank-body"><fo:block text-align="center"/></fo:static-content><fo:static-content flow-name="xsl-region-inner-first"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-inner-odd"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-inner-even"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-inner-blank"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-outer-first"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-outer-odd"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-outer-even"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-outer-blank"><fo:block/></fo:static-content><fo:static-content flow-name="xsl-region-after-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="start" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="end" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="start" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="end" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="start" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="end" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="start" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="end" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body" start-indent="4pc" end-indent="0pt"><fo:block id="N2000B"><fo:block font-family="sans-serif,Symbol,ZapfDingbats"><fo:block text-align="center" start-indent="0pt"><fo:block font-weight="bold" font-size="24.8832pt" keep-with-next.within-column="always"><fo:block keep-with-next.within-column="always" space-before.optimum="10pt" space-before.minimum="10pt * 0.8" space-before.maximum="10pt * 1.2" hyphenate="false" text-align="center" start-indent="0pt" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2">The Ivy Java library guide</fo:block></fo:block><fo:block>CENA NT02-819</fo:block><fo:block font-size="14.4pt" space-before="0.5em"><fo:block>Yannick Jestin <fo:inline font-family="monospace"><fo:inline hyphenate="false" keep-together.within-line="always">&lt;yannick.jestin@enac.fr&gt;</fo:inline></fo:inline></fo:block></fo:block><fo:block space-before="0.5em">Copyright <fo:inline font-family="serif,Symbol,ZapfDingbats">©</fo:inline> 2002, 2006-2011 CENA, DSNA/DTI, ENAC</fo:block><fo:block space-before="0.5em">June 24, 2011</fo:block><fo:block font-family="serif,Symbol,ZapfDingbats" margin-right="0.5in" margin-left="0.5in" text-align="start" space-before="0.5em"><fo:block start-indent="0.0in" end-indent="0.0in"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="10pt" space-before.minimum="10pt * 0.8" space-before.maximum="10pt * 1.2" hyphenate="false" text-align="center">Abstract</fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This document is a programmer's guide that describes how to use
	the Ivy Java library to connect applications to an Ivy bus. This guide
	describes version 1.2.13 of the library. This document itself is part
	of the Java package, available on the <fo:basic-link external-destination="url(http://www2.tls.cena.fr/products/ivy/)">Ivy web site</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://www2.tls.cena.fr/products/ivy/)">http://www2.tls.cena.fr/products/ivy/</fo:basic-link>]</fo:inline>, and
	on the <fo:basic-link external-destination="url(http://www.lii-enac.fr/~jestin/ivy-java/)">maintainer's 
      web page</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://www.lii-enac.fr/~jestin/ivy-java/)">http://www.lii-enac.fr/~jestin/ivy-java/</fo:basic-link>]</fo:inline>.</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" id="toc...N2000B"><fo:block><fo:block><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" font-size="17.28pt" start-indent="0pt" space-after="0.5em" space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em">Table of Contents</fo:block></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2004B">Foreword</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2004B"><fo:page-number-citation ref-id="N2004B"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20051">What is Ivy?</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20051"><fo:page-number-citation ref-id="N20051"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20071">The Ivy Java library</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20071"><fo:page-number-citation ref-id="N20071"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.N2000B.N20071" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20076">What is it?</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20076"><fo:page-number-citation ref-id="N20076"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20082">Getting and installing the Ivy Java library</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20082"><fo:page-number-citation ref-id="N20082"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N200C4">Your first Ivy application</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N200C4"><fo:page-number-citation ref-id="N200C4"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.N2000B.N200C4" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N200CC">The code</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N200CC"><fo:page-number-citation ref-id="N200CC"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N200D8">Compiling it</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N200D8"><fo:page-number-citation ref-id="N200D8"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N200E7">Testing</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N200E7"><fo:page-number-citation ref-id="N200E7"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2010F">Basic functions</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2010F"><fo:page-number-citation ref-id="N2010F"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.N2000B.N2010F" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20117">Initialization an Ivy object and joining the bus</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20117"><fo:page-number-citation ref-id="N20117"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20162">Emitting messages</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20162"><fo:page-number-citation ref-id="N20162"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2016E">Subscription to messages</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2016E"><fo:page-number-citation ref-id="N2016E"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2019A">Subscribing to application events</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2019A"><fo:page-number-citation ref-id="N2019A"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N201C8">Advanced functions</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N201C8"><fo:page-number-citation ref-id="N201C8"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.N2000B.N201C8" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N201CD">Sending to self</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N201CD"><fo:page-number-citation ref-id="N201CD"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N201D9">Initializing a domain</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N201D9"><fo:page-number-citation ref-id="N201D9"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N201EB">Newline within messages</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N201EB"><fo:page-number-citation ref-id="N201EB"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N201FA">Sending direct messages</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N201FA"><fo:page-number-citation ref-id="N201FA"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20203">Ivy and swing GUI</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20203"><fo:page-number-citation ref-id="N20203"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2020C">Asynchronous Subscription to messages</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2020C"><fo:page-number-citation ref-id="N2020C"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2021E">Waiting for someone: waitForClient and waitForMsg</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2021E"><fo:page-number-citation ref-id="N2021E"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2023F">Subscribing to subscriptions</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2023F"><fo:page-number-citation ref-id="N2023F"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20254">Monitoring the bus</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20254"><fo:page-number-citation ref-id="N20254"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20263">Message classes</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20263"><fo:page-number-citation ref-id="N20263"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2029D">Utilities</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2029D"><fo:page-number-citation ref-id="N2029D"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.N2000B.N2029D" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N202A2">jprobe</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N202A2"><fo:page-number-citation ref-id="N202A2"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20326">IvyDaemon</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20326"><fo:page-number-citation ref-id="N20326"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20338">jafter</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20338"><fo:page-number-citation ref-id="N20338"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20342">programmer's style guide</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20342"><fo:page-number-citation ref-id="N20342"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.N2000B.N20342" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2034A">join the right bus</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2034A"><fo:page-number-citation ref-id="N2034A"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20356">nice regular expressions</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20356"><fo:page-number-citation ref-id="N20356"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2035F">Something's not working</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2035F"><fo:page-number-citation ref-id="N2035F"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20368">time consuming callbacks</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20368"><fo:page-number-citation ref-id="N20368"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20374">how to perform requests</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20374"><fo:page-number-citation ref-id="N20374"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N203AD">how to quit the application ?</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N203AD"><fo:page-number-citation ref-id="N203AD"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N203CC">Contacting the authors</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N203CC"><fo:page-number-citation ref-id="N203CC"/></fo:basic-link></fo:inline></fo:block></fo:block>


  

  <fo:block id="N2004B"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Foreword</fo:marker><fo:block font-size="20.735999999999997pt">Foreword</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
This document was written in SGML according to the DocBook DtD, so
as to be able to generate PDF and html output. However, the authors
have not yet mastered the intricacies of SGML, the DocBook DtD, the
DocBook Stylesheets and the related tools, which have achieved the
glorious feat of being far more complex than LaTeX and Microsoft Word
combined together. This explains why this document, in addition to being
incomplete, is quite ugly.
    </fo:block></fo:block>

    <fo:block id="N20051"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">What is Ivy?</fo:marker><fo:block font-size="20.735999999999997pt">What is Ivy?</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>  <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Ivy is a software bus initially initially designed at <fo:basic-link external-destination="url(http://www.cena.fr/)">CENA</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://www.cena.fr/)">http://www.cena.fr/</fo:basic-link>]</fo:inline>.  A software bus is a system that
allows software applications to exchange information with the illusion of
broadcasting that information, selection being performed by the receiving
applications. Using a software bus is very similar to dealing with events in a
graphical toolkit: on one side, messages are emitted without caring about who
will handle them, and on the other side, one decide to handle the messages
that have a certain type or follow a certain pattern. Software buses are
mainly aimed at facilitating the rapid development of new agents, and at
managing a dynamic collection of agents on the bus: agents show up, emit
messages and receive some, then leave the bus without blocking the others.
</fo:block>
        <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Ivy is implemented as a collection of libraries for several languages and
platforms. If you want to read more about the principles Ivy before reading
this guide of the Java 
library, please refer to <fo:inline font-style="italic">The Ivy software bus: a white
paper</fo:inline>
            . If you want more details about the internals of Ivy, have a
look at <fo:inline font-style="italic">The Ivy architecture and protocol</fo:inline>
            . And finally,
if you are more interested in other languages, refer to other guides such as
<fo:inline font-style="italic">The Ivy Perl library guide</fo:inline>
             (not yet written), or
<fo:inline font-style="italic">The Ivy C library guide</fo:inline>
            . All those documents should be available from <fo:basic-link external-destination="url(http://www2.tls.cena.fr/products/ivy/)">the Ivy Web site </fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://www2.tls.cena.fr/products/ivy/)">http://www2.tls.cena.fr/products/ivy/</fo:basic-link>]</fo:inline>
            .
</fo:block>
    </fo:block>
    <fo:block id="N20071"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The Ivy Java library</fo:marker><fo:block font-size="20.735999999999997pt">The Ivy Java library</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
        
        <fo:block id="N20076"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">What is it?</fo:marker><fo:block font-size="17.28pt">What is it?</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The Ivy Java library (aka fr.dgac.ivy) is a Java package that
allows you to connect applications to an Ivy bus. 
You can also use it to connect any Java
application to an Ivy bus. So far, this library has been tested and used on a variety of
Java virtual machines (from 1.1.7 to 1.6.0), a variety of vendors (kaffe+gcj,
sun jdk, blackdown) and on a variety of architectures (GNU/Linux, Solaris,
Windows NT,XP,2000, MacOSX). It used to be developped and maintained on a Debian
GNU/Linux ox, but the maintainer got lazy, and enjoys a MacOSX snow leopard powered macbook.
</fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The Ivy Java library was originally developed by FranÃ§ois-RÃ©gis Colin and 
Yannick Jestin within a group at CENA (Toulouse, France). It is now maintained
by Yannick.
</fo:block>
        </fo:block>
        <fo:block id="N20082"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Getting and installing the Ivy Java library</fo:marker><fo:block font-size="17.28pt">Getting and installing the Ivy Java library</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">You can get the latest versions of the Ivy Java library from <fo:basic-link external-destination="url(http://www.tls.cena.fr/products/ivy/)">the Ivy web site</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://www.tls.cena.fr/products/ivy/)">http://www.tls.cena.fr/products/ivy/</fo:basic-link>]</fo:inline>. It is packaged either as a jar file or as a debian package. We plan to package it according to different distribution formats, such as .msi (Windows) .deb or .rpm package (Debian, Redhat and Mandrake linux). Contributors are welcome for package management.</fo:block>

            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">For most people, the simplest way is to install the
	      ivy-java.jar jar file, containing both ivy java and its
	      gnu.getopt dependancy. There are many ways to use this file:
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="N20090"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20092"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>(preferred solution) put it in the command line each time you want to use it, as a -classpath ivy-java.jar parametery</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20096"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>add its location in your CLASSPATH environment variable,</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N2009A"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Linux: put the it in your $JAVA_HOME/jre/lib/ext/ directory,</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N2009E"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Windows: put it in the right place, perhaps C:\Program Files\JavaSoft\...,</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N200A2"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>MacOSX: put it ~/Library/Java/Extensions , or system wide,</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N200A6"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block><fo:block>Eclipse, Netbeans: add it to your project,</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
            </fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The numbered packages (ivy-1.2.14.jar ivy-1.2.14.tar.gz) also contain documentation, sources code alongside with examples and a small set of tools (IvyDaemon, jprobe, jafter). You may need to install the <fo:basic-link external-destination="url(http://www.urbanophile.com/arenn/coding/download.html)">gnu getopt library</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://www.urbanophile.com/arenn/coding/download.html)">http://www.urbanophile.com/arenn/coding/download.html</fo:basic-link>]</fo:inline>, included in the jar file  but not in the debian package.
</fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
In order to test the presence of Ivy jar on your system once installed, run the following command: 
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N200B5">
<fo:inline font-family="monospace" font-weight="bold">$ java fr.dgac.ivy.tools.Probe</fo:inline>
</fo:block>
                
If should display a line about broadcasting on a strange address, this is OK
and means it is ready and working. If it complains about a missing class (
java.lang.NoClassDefFoundError ), then you have not pointed your virtual
machine to the jar file or your installation is incomplete.
Alternatively, you can use the jprobe shell script.
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N200BB">
<fo:inline font-family="monospace" font-weight="bold">$ jprobe</fo:inline>
</fo:block>
            </fo:block>
        </fo:block>
    </fo:block>
    <fo:block id="N200C4"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Your first Ivy application</fo:marker><fo:block font-size="20.735999999999997pt">Your first Ivy application</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
        
        <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
We are going to write a "Hello world translater" for an Ivy bus. The application will
subscribe to all messages starting with the "Hello" string, and re-emit them
on the bus having translated "Hello" into "Bonjour" (Hello in french).
In addition, the application will quit as soon as it receives a "Bye" message.
</fo:block>
        <fo:block id="N200CC"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The code</fo:marker><fo:block font-size="17.28pt">The code</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Here is the code of "ivyTranslater.java":
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N200D3">
import fr.dgac.ivy.* ;

class ivyTranslater implements IvyMessageListener {

  private Ivy bus;

  ivyTranslater() throws IvyException {
    // initialization, name and ready message
    bus = new Ivy("IvyTranslater","IvyTranslater Ready",null);
    // classical subscription
    bus.bindMsg("^Hello(.*)",this);
    // inner class subscription ( think awt )
    bus.bindMsg("^Bye$",new IvyMessageListener() {
      public void receive(IvyClient client, String[] args) {
	// leaves the bus, and as it is the only thread, quits
        bus.stop();
      }
    });
    bus.start(null); // starts the bus on the default domain
  }

  // callback associated to the "Hello" messages"
  public void receive(IvyClient client, String[] args) {
    try {
      bus.sendMsg("Bonjour"+((args.length&gt;0)?args[0]:""));
    } catch (IvyException ie) {
      System.out.println("can't send my message on the bus");
    }
  }

  public static void main(String args[]) throws IvyException {
    new ivyTranslater();
  }
}
</fo:block>
            </fo:block>
        </fo:block>
        <fo:block id="N200D8"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Compiling it</fo:marker><fo:block font-size="17.28pt">Compiling it</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
You should be able to compile the application with the
following command (the classpath may vary):
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N200DF">
$ <fo:inline font-family="monospace" font-weight="bold">javac -cp ivy-java.jar ivyTranslater.java</fo:inline>
                </fo:block>
            </fo:block>
        </fo:block>
        <fo:block id="N200E7"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Testing</fo:marker><fo:block font-size="17.28pt">Testing</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
We are going to test our application with <fo:inline font-weight="bold">fr.dgac.ivy.tools.Probe</fo:inline>.
In a shell, launch ivyTranslater:
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N200F1">
$ <fo:inline font-family="monospace" font-weight="bold">java -cp .:ivy-java.jar ivyTranslater</fo:inline>
</fo:block>
                
In another shell, launch <fo:inline font-weight="bold">java fr.dgac.ivy.tools.Probe '(.*)'</fo:inline>
                .
You can see that the IvyTranslater has joined the bus, published its
subscriptions, and sent the mandatory ready message. As your probe has
subscribed to the eager regexp .* and reports the matched string within the
brackets (.*), the ready message is printed.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N200FA">
$ <fo:inline font-family="monospace" font-weight="bold">java fr.dgac.ivy.tools.Probe '(.*)'</fo:inline>
                    
you want to subscribe to (.*)
broadcasting on 127.255.255.255:2010
IvyTranslater connected
IvyTranslater subscribes to ^Bye$
IvyTranslater subscribes to ^Hello(.*)
IvyTranslater sent 'IvyTranslater Ready'
</fo:block>
                

Probe is an interactive program. Type "Hello Paul", and you should receive "Bonjour Paul".
Type "Bye", and the ivyTranslater application should quit to the shell. Just
quit Probe, issuing a Control-D ( or .quit ) on a line, and Probe exists to
the shell.
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20100">
                    <fo:inline font-family="monospace" font-weight="bold">Hello Paul</fo:inline>
                    
-&gt; Sent to 1 peers
IvyTranslater sent 'Bonjour Paul'
<fo:inline font-family="monospace" font-weight="bold">Bye</fo:inline>
                    
-&gt; Sent to 1 peers
IvyTranslater disconnected
<fo:inline font-family="monospace" font-weight="bold">&lt;Ctrl-D&gt;</fo:inline>
                    
$
</fo:block>
            </fo:block>
        </fo:block>
    </fo:block>
    <fo:block id="N2010F"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Basic functions</fo:marker><fo:block font-size="20.735999999999997pt">Basic functions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
        
        <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The javadoc generated files are available on line on the ivy web site, and should be included in your ivy-1.2.14.jar java package (or in /usr/share/doc/libivy-java, alongside with this very manual, if you used a debian package). Here are more details on those functions.
</fo:block>
        <fo:block id="N20117"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Initialization an Ivy object and joining the bus</fo:marker><fo:block font-size="17.28pt">Initialization an Ivy object and joining the bus</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Initializing a Java Ivy agent is a two step process. First of all, you must
create an <fo:inline font-family="monospace">fr.dgac.ivy.Ivy</fo:inline>
                 object. It will be the
repository of your agent name, network state, subscriptions, etc. Once this object is
created, you can subscribe to the various Ivy events: text messages through
Perl compatible regular expressions, other agents' arrival, departure,
subscription or unsubscription to regexps, direct messages or die command
issued by other agents.
</fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
At this point, your application is still not connected. In
order to join the bus, call the <fo:inline font-family="monospace">start(string domain)</fo:inline>
                 method on
your Ivy object. This will spawn two threads that will remain active until you
call the <fo:inline font-family="monospace">stop()</fo:inline>
                 method on your Ivy object or until some
other agent sends you a die message. Once this <fo:inline font-family="monospace">start()</fo:inline>
                 method has been called,
the network machinery is set up according to the ivy protocol, and your agent
is eventually ready to handle messages on the bus.
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2012D">
fr.dgac.ivy.Ivy(String name,String message, IvyApplicationListener appcb)
</fo:block>
                
This constructor readies the structures for the software bus connexion. It is
possible to have more than one bus at the same time in an application, be it on
the same ivy broadcast address or one different ones. The <fo:inline font-family="monospace" font-style="italic">name</fo:inline> is
the name of the application on the bus, and will by transmitted to other
application, and possibly be used by them (through <fo:inline font-family="monospace">String IvyClient.getApplicationName()</fo:inline>).
The <fo:inline font-family="monospace" font-style="italic">message</fo:inline> is the first message that will be sent to  other applications, when connected. This is a slightly different broadcasting scheme than the normal one ( see <fo:inline font-style="italic">The Ivy
architecture and protocol</fo:inline> document for more information. If <fo:inline font-family="monospace" font-style="italic">message</fo:inline> is null, nothing will be sent. Usually, other application subscribe to this ready message to trigger actions depending on the presence of your agent on the bus. The <fo:inline font-family="monospace" font-style="italic">appcb</fo:inline> is an object
implementing the IvyApplicationListener interface. Its different methods
are called upon arrival or departure of other agents on the bus, or when your
application itself leaves the bus, or when a direct message is sent to your
application. It is also possible to add or remove other application listeners
using the <fo:inline font-family="monospace">Ivy.AddApplicationListener()</fo:inline> and
<fo:inline font-family="monospace">Ivy.RemoveApplicationListener()</fo:inline> functions.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20148">
public void start(String domainbus) throws IvyException
</fo:block>
                
This method connects the Ivy bus to a domain or list of domains. This spawns network managing threads that will be stropped with <fo:inline font-family="monospace">Ivy.stop()</fo:inline> or when a die message is received.

You're invited to let the domainbus set to null, and to use JVM parameters to choose the bus you will connect to. The rendezvous point is the String parameter <fo:inline font-family="monospace" font-style="italic">domainbus</fo:inline> , an
UDP broadcast address like "10.0.0:1234" (255 are added at the end to become an
IPv4 UDP broadcast address). This will determine the meeting point of the different
applications. For the gory details, this is done with an UDP broadcast or an
IP Multicast, so beware of routing problems ! You can also use a comma separated
list of domains, for instance "10.0.0.1234,192.168:3456". If the domain is
<fo:inline font-family="monospace" font-style="italic">null</fo:inline> , the API will check for the property
<fo:inline font-family="monospace" font-style="italic">IVY_BUS</fo:inline> (set at the invocation of the JVM, e.g $
java -DIVY_BUS=10:4567 myApp, or via an environment variable on older JVMs);
if not present, it will use the default bus, which is 127.255.255.255:2010.

The default address requires a broadcast enabled loopback interface to be
active on your system (CAUTION, on MacOSX and some releases of SunOS, the
default bus doesn't work ...). If an IvyException is thrown, your application
is not able to send or receive data on the specified domain. 

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20157">
public void stop() 
</fo:block>
                
This methods stops the threads, closes the sockets and performs some clean-up.
If there is no other thread running, the program quits. This is the preferred
way to quit a program within a callback (please don't use
<fo:inline font-family="monospace">System.exit()</fo:inline> before
having stopped the bus, even if it works ... ). Note that it is still
possible to reconnect to the bus by calling <fo:inline font-family="monospace">start()</fo:inline> once
again.
</fo:block>
        </fo:block>
        <fo:block id="N20162"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Emitting messages</fo:marker><fo:block font-size="17.28pt">Emitting messages</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Emitting a message is much like echoing a string on a output channel. Portion
of the message will be sent to the connected agent if the message matches
their subscriptions.
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20169">
public int sendMsg(String message) 
</fo:block>
                
Will send each remote agent the substrings in case there is a regexp matching.
The default behaviour is not to send the message to oneself !
The result is the number of messages actually sent. The main issue here is
that the sender ivy agent is the one who takes care of the regexp matching, so
that only useful information are conveyed on the network. Be sure that the
message sent doesn't contains protocol characters: 0x01 to 0x08 and
unfortunately 0x0D, the newline character. If you want to send newlines, see
protectNewline, in advanced functions.

</fo:block>
        </fo:block>
        <fo:block id="N2016E"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Subscription to messages</fo:marker><fo:block font-size="17.28pt">Subscription to messages</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Subscribing to messages consists in binding a callback function to a message pattern.
Patterns are described by regular expressions with captures. Since ivy-java
1.2.4, Perl Compatible Regular Expressions are used, with the Apache Jakarta
Project regexp library (see the <fo:basic-link external-destination="url(http://jakarta.apache.org/regexp/)">jakarta regexp
web site</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://jakarta.apache.org/regexp/)">http://jakarta.apache.org/regexp/</fo:basic-link>]</fo:inline>
                ). When a message matching the regular expression is detected
on the bus (the matching is done at the sender's side), the recipient's callback function is
called. The captures (ie the bits of the message that match the parts of regular expression
delimited by brackets) are passed to the callback function much like options are passed to main.
Use the <fo:inline font-family="monospace">bindMsg()</fo:inline>
                 method to bind a callback to a pattern, and the
<fo:inline font-family="monospace">unbindMsg</fo:inline>
                 method to delete the binding.
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2017F">
public int bindMsg(String regexp, IvyMessageListener callback);
public void unBindMsg(int id);
</fo:block>
                
The <fo:inline font-family="monospace" font-style="italic">regexp</fo:inline>
                 follows the PCRE syntax (see the <fo:basic-link external-destination="url(http://www.pcre.org/)"> pcre web site</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://www.pcre.org/)">http://www.pcre.org/</fo:basic-link>]</fo:inline>
                 or the pcrepattern(3) man
page), grouping is done with brackets. The <fo:inline font-family="monospace" font-style="italic">callback</fo:inline>
                
is an object implementing the IvyMessageListener interface, with the <fo:inline font-family="monospace">receive</fo:inline>
                
method. The thread listening on the connexion with the sending agent will execute the callback.
</fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
There are two ways of defining the callback: the first one is to make an
object an implementation of the IvyMessageListener interface, and to implement
the <fo:inline font-family="monospace">public void receive(Ivyclient ic, String[] args)</fo:inline>
                
method. But this is limited to one method per class, so the second method used
is the one of anonymous inner classes, introduced since Java 1.1 and widely used in
swing programs, for instance:
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20195">
bindMsg("^a*(.*)c*$", new IvyMessageListener() {
  public void receive(IvyClient ic,String[] args) {
    ... // do some stuff
  }
});
</fo:block>
                
The processing of the ivy protocol and the execution of the callback are
performed within an unique thread per remote client. Thus, the callback will
be performed sequentially. If you want an asynchronous handling of callbacks,
see in the advanced functions.

</fo:block>
        </fo:block>
        <fo:block id="N2019A"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Subscribing to application events</fo:marker><fo:block font-size="17.28pt">Subscribing to application events</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Either at the creation time of your <fo:inline font-family="monospace">Ivy</fo:inline>
                 object or later
on with <fo:inline font-family="monospace">Ivy.addApplicationListener()</fo:inline>
                , you can add add
some behaviour to perform callbacks upon different events:
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="N201A7"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N201A9"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>when an agent joins the bus</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N201AF"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>when an agent leaves the bus</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N201B5"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>when an agent sends you a direct message</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N201BB"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>when an agent forces you to leave the bus</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
                
This can be handy if you design an agent requiring somme coordination with
other dedicated agents to run properly. To do so, the easiest way is to use
the ready messages. You can find later a description of the <fo:inline font-family="monospace">Ivy.waitForClient()</fo:inline>
                 method to implement a correct synchronization.
</fo:block>
        </fo:block>
    </fo:block>
    <fo:block id="N201C8"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Advanced functions</fo:marker><fo:block font-size="20.735999999999997pt">Advanced functions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
        
        <fo:block id="N201CD"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Sending to self</fo:marker><fo:block font-size="17.28pt">Sending to self</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
By default, an application doesn't send the messages to itself. Usually, there
are more efficient and convenient ways to communicate withing a program.
However, if you want to take benefit of the ease of Ivy or to be as
transparent as possible, you can set the Ivy object so that the pattern
matching and message sending will be done for the sender too.
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N201D4">
public void sendToSelf(boolean b);
public boolean isSendToSelf();
</fo:block>
            </fo:block>
        </fo:block>
        <fo:block id="N201D9"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Initializing a domain</fo:marker><fo:block font-size="17.28pt">Initializing a domain</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The default behaviour of an Ivy agent is to accept a command line switch ( -b
10:2010, e.g. ), and if not present, to use the IVYBUS property, ( given by the
-DIVYBUS=10:34567 parameter to the jvm ), and, if not present, to default to
Ivy.DEFAULT_DOMAIN. This domain is given as a string ardument to the
Ivy.start() function. To make this logic easier to follow, the Ivy class
provides the programmer with two useful function:
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N201E0">
public static String getDomain(String arg);
public static String getDomainArgs(String progname,String[] args);
</fo:block>
                
The <fo:inline font-family="monospace">Ivy.getDomain()</fo:inline>
                 function, if arg is non null, will return arg, otherwise it
will return the IVYBUS property, otherwise the DEFAULT_DOMAIN. A very simple
way to start an Ivy agent is with
<fo:inline font-family="monospace">Ivy.start(getDomain(null))</fo:inline>
                . The
getDomainArgs(name,args) will add very simple processing of the args given to
the main() function, and give higher priority to the command line argument.
</fo:block>
        </fo:block>
        <fo:block id="N201EB"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Newline within messages</fo:marker><fo:block font-size="17.28pt">Newline within messages</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
As we have seen in <fo:inline font-family="monospace">Ivy.sendMsg()</fo:inline>
                , you can not have
newline characters within the string you send on the bus. If you still want to
send messages with newline, you can encode and decode them at the emitter and
receiver's side. With <fo:inline font-weight="bold">Ivy.protectNewLine(boolean b)</fo:inline>
                , you can set your
Ivy object to ensure encoding and decoding of newlines characters. This is tested
and working between Java ivy applications, but not yet implemented in other
ivy libraries. The newlines are replaced by ESC characters ( hex 0x1A ). As
the encoding and decoding cost a little more CPU and is not yet standardised
in the Ivy protocol, use it at your own risk. We should of course protect the
other protocol special characters.
</fo:block>
        </fo:block>
        <fo:block id="N201FA"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Sending direct messages</fo:marker><fo:block font-size="17.28pt">Sending direct messages</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Direct messages is an ivy feature allowing the exchange of information between
two ivy clients. It overrides the subscription mechanism, making the exchange
faster ( there is no regexp matching, etc ). However, this features breaks the
software bus metaphor, and should be replaced with the relevant bounded.
regexps, at the cost of a small CPU overhead. The full direct message
mechanism in Java has been made available since the ivy-java-1.2.3, but it
won't be much documented, in order to make it harder to use.
</fo:block>
        </fo:block>
        <fo:block id="N20203"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Ivy and swing GUI</fo:marker><fo:block font-size="17.28pt">Ivy and swing GUI</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Swing requires the code to run in the main swing thread. In order to avoid
problems, be sure tu use the SwingUtilities.invokeLater() or
SwingUtilities.invokeAndWait() methods if you Ivy callbacks impact swing
components.
</fo:block>
        </fo:block>
        <fo:block id="N2020C"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Asynchronous Subscription to messages</fo:marker><fo:block font-size="17.28pt">Asynchronous Subscription to messages</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
For each and every remote agent on the bus, a thread is in charge of handling the encoding
and decoding of the messages and of the execution of the callbacks. Thus, if a
callback consumes much time, the rest of the communication is put on hold and
the processing is serialised, eventually leading to a stacking in the socket
buffer and to the blocking of the message sender. To alleviate this, we have
set up (since 1.2.4) an asynchronous subscription, where each and every
time a callback is performed, it is done in a newly created separate thread.
As creating a thread is quite expensive, one should use this method for
lengthy callbacks only. Furthermore, to avoid concurrent access to the
callback data, the String[] argument passed on to the callbacks are cloned.
This causes an extra overhead.
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20213">
public int bindMsg(String regexp, IvyMessageListener callback,boolean async);
public int bindAsyncMsg(String regexp, IvyMessageListener callback);
</fo:block>
                
If the <fo:inline font-family="monospace" font-style="italic">async</fo:inline>
                 boolean parameter is set to true, a new
thread will be created for each callback. The same
<fo:inline font-family="monospace">unBindMsg()</fo:inline>
                 can be called to cancel a subscription.
</fo:block>
        </fo:block>
        <fo:block id="N2021E"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Waiting for someone: waitForClient and waitForMsg</fo:marker><fo:block font-size="17.28pt">Waiting for someone: waitForClient and waitForMsg</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Very often, while developing an Ivy agent, you will be facing the need of the
arrival of another agent on the bus to perform your task correctly. For
instance, for your spiffy application to run, a gesture recognition engine
will have to be on the bus, or another data sending application. The Ivy way
to do this is to subscribe to the known agent's <fo:inline font-family="monospace" font-style="italic">ready
message</fo:inline>
                 (be sure to subscribe before starting the
bus), or to implement an IvyApplicationListener and change of state in the
<fo:inline font-family="monospace">connect()</fo:inline>
                 method. However, it is often useful to stop and
wait, and it is awkward to wait for a variable change.
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2022B">
IvyClient waitForClient(String name, int timeout)
IvyClient waitForMsg(String regexp, int timeout) 
</fo:block>
                
These two methods allow you to stop the flow of your main (or other) thread
by waiting for the arrival of an agent, or for the arrival of a message. If
the agent is already here, <fo:inline font-family="monospace">waitForClient</fo:inline>
                 will return
immediately. If <fo:inline font-family="monospace" font-style="italic">timeout</fo:inline>
                 is set to null, your thread can
wait "forever", otherwise it will wait <fo:inline font-family="monospace" font-style="italic">timeout</fo:inline>
                
milliseconds. With <fo:inline font-family="monospace">waitForMsg</fo:inline>
                , be aware that your subscription can be
propagated to the remote agents after that their message was sent, so that
you'd wait for nothing. You had better be sure that the
<fo:inline font-family="monospace">waitForMsg</fo:inline>
                 method is called early enough.
</fo:block>
        </fo:block>
        <fo:block id="N2023F"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Subscribing to subscriptions</fo:marker><fo:block font-size="17.28pt">Subscribing to subscriptions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A very common practice when beginning to play with ivy is to develop an ivy
agent monitor (the good practice is to use the excellent ivymon written in
perl by Daniel Etienne). If you want to notity the user that a remote agent
has subscribed or unsubscribed to a regular expression after the
protocol handshake, then your monitor agent has to subscribe to subscriptions.
To do so, use the following functions:
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20246">
public int addBindListener(IvyBindListener callback);
public void	 removeBindListener(int id)
</fo:block>
                
A <fo:inline font-family="monospace">IvyBindListener</fo:inline>
                 object must implement the following
interface:
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2024C">
void bindPerformed(IvyClient client, int id, String regexp);
void unbindPerformed(IvyClient client, int id, String regexp);
</fo:block>
                
For a code sample, see the Probe utility source code. Note that if you have
enabled a filter (message classes), you will be notified the subscriptions
even if they are considered useless. If you want to check if the regexp has a
chance to match the message you're sending, use the
<fo:inline font-family="monospace">boolean Ivy.CheckRegexp(String regexp)</fo:inline>
                .
</fo:block>
        </fo:block>
        <fo:block id="N20254"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Monitoring the bus</fo:marker><fo:block font-size="17.28pt">Monitoring the bus</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
When in doubt, to check if the remote client is still responding, instead of
relying on a callback, you can test the response of the protocol parsing
thread. Use following method:
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2025B">
Ivyclient.ping(PingCallback pc);
</fo:block>
                
It will send a ping token that will (hopefully) be parsed by the remote agent,
and will trigger the following message with the elapsed time in milliseconds:
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2025E">
void PingCallback.pongReceived(IvyClient ic,int elapsedTime);
</fo:block>
                
An example is provided in fr.dgac.ivy.tools.Probe.
</fo:block>
        </fo:block>
        <fo:block id="N20263"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Message classes</fo:marker><fo:block font-size="17.28pt">Message classes</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
When your Ivy bus is populated with many agents, the cost of pattern matching
becomes painful. For instance, a bus with 20+ agents, with 2000+
subscriptions, with hundreds of messages per second might cause a high CPU
load, thus leading to slow responsiveness in GUI animations. To limit this
phenomenon, use bounded regexp as much as possible like <fo:inline font-family="monospace">^NAME
VALUE=(.*)</fo:inline>
                 ( see the programmer's style guide later on ). However,
2000+ subscription are still 2000+ tests of bounded regexp, even if is less
costful. It is possible not to do the tests provided some requirements are
met:
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="N2026D"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N2026F"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>your agent knows exhaustively and exactly the prefixes of all
the messages it will send</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20275"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>your use the <fo:inline font-family="monospace">Ivy.setFilter()</fo:inline>
                             before
starting the bus, with the list of prefixes ( e.g.: { "TOTO1" "PREFIX", "ETC"
} ) </fo:block>
                    </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
            </fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
If you use the message classes, your Ivy agent will ignore the bounded subscriptions
of other agents that will never match any of your prefixes ( e.g: ^COUCOU
neither matches TOTO1,  PREFIX, nor ETC ). The check is made this way:
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="N20282"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20284"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>if the regexp is bounded, the filter extracts the first word
according to this regexp: <fo:inline font-family="monospace">^\\^([a-zA-Z0-9_-]+).*</fo:inline>
                        </fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N2028D"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>the word is compared character to character to all the
prefixes in the message class; if it is not present, the subscription is
discarded</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
            </fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
When your agent sends a message, many pattern matching won't be made, and it
might save some time. Be sure to activate the <fo:inline font-family="monospace">setFilter()</fo:inline>
                
when you are sure that you know perfectly the message classes. You can play
with the message classes with jprobe and see the problems that can arise.
</fo:block>
        </fo:block>
    </fo:block>
    <fo:block id="N2029D"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Utilities</fo:marker><fo:block font-size="20.735999999999997pt">Utilities</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
        
        <fo:block id="N202A2"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">jprobe</fo:marker><fo:block font-size="17.28pt">jprobe</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
jprobe is your swiss army knife as an Ivy Java developer. Use it
to try your regular expressions, to check the installation of the system, to
log the messages, etc. To use it, either run <fo:inline font-weight="bold">java
fr.dgac.ivy.tools.Probe</fo:inline>
                , run the jar file directly with <fo:inline font-weight="bold">$ java -jar ivy.jar</fo:inline>
                , or use the jprobe shell script.
</fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The command line options ( available with the -h command line switch ) are the
following:
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="N202B2"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202B4"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
-b allows you to specify the ivy bus. This overrides the -DIVY_BUS
Java property. The default value is 127.255.255.255:2010.
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202BA"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
-n NAME allows you to specify the name of this probe agent on the bus. It
defaults to JPROBE, but it might be difficult to differentiate which jprobe
sent which message with a handful of agents with the same name
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202C0"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
-q allows you to spawn a silent jprobe, with no terminal output
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202C6"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
-s sends to self ( default off ), allows subscription to its own messages
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202CC"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
-n NEWNAME changes JPROBE default Ivy name to another one, which can prove to
be useful when running different probes
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202D2"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
-t add timestamps to messages
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202D8"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
-d allows you to use JPROBE on debug mode. It is the same as setting the
VY_DEBUG property ( java -DIVY_DEBUG fr.dgac.ivy.tools.Probe is the same as java
fr.dgac.ivy.tools.Probe -d )
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202DE"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
-c MESSAGECLASS uses a message filter (see <fo:inline font-family="monospace">Ivy.setFilter()</fo:inline>
                            ), for example
'Word1,Word2,Word3'
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202E7"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
-h dumps the command line options help.
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
            </fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The run time commands are preceded by a single dot (.) at the beginning of the
line. Issue ".help" at the prompt ( without the double quotes ) to have the
list of available commands. If the lines does not begin with a dot, jprobe tries
to send the message to the other agents, if their subscriptions allows it. The
dot commands are the following
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="N202F1"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202F3"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
.die CLIENTNAME issues an ivy die command, presumably forcing the first agent
with this name to leave the bus
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202F9"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
.bye (or .quit) forces the JPROBE application to exit. This is the same as inputting an end of file character on a single input line ( ^D ).
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N202FF"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
.direct client id message sends the direct message to the remote client, using
the numeric id
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20305"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
.bind REGEXP and .unbind REGEXP will change Probe's subscription
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N2030B"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
.list gives the list of clients seen on the ivy bus
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20311"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
.bound AGENT lists the regexps the AGENT has subscribed to. You can use .bound
* to get the whole list.
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20317"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
.time COUNT MSG sends the MSG COUNT times and displays the elapsed time
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N2031D"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>
.ping CLIENT measures the time it takes to reach a client
</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
            </fo:block>
        </fo:block>
        <fo:block id="N20326"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">IvyDaemon</fo:marker><fo:block font-size="17.28pt">IvyDaemon</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
As the launching and quitting of an ivy bus is a bit slow, it is not
convenient to spawn an Ivy client each time we want to send a simple message.
To do so, we can use the IvyDaemon, which is a TCP daemon sitting and waiting
on the port 3456, and also connected on the default bus. Each time a remote
application connects to this port, every line read until EOF will be forwarded
on the bus. The standard port and bus domain can be overridden by command line
switches ( use <fo:inline font-weight="bold">$ java fr.dgac.ivy.tools.IvyDaemon -h</fo:inline>
                 ).
First, spawn an ivy Damon: <fo:inline font-weight="bold">$ java fr.dgac.ivy.tools.IvyDaemon</fo:inline>
                
then, within your shell scripts, use a short TCP connexion ( for instance
netcat ): <fo:inline font-weight="bold">$ echo "hello world" | nc -q 0 localhost 3456</fo:inline>
                
The "hello world" message will be sent on the default Ivy Bus to anyone having
subscribe to a matching pattern
</fo:block>
        </fo:block>
        <fo:block id="N20338"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">jafter</fo:marker><fo:block font-size="17.28pt">jafter</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
jafter ( or fr.dgac.ivy.tools.JAfter ) is a simple utility that can be used
within shell script. The rationale is to block the processing until a specific
message is received, then continue. This can be used to wait for a ready
message before lauching another agent. The jafter program can wait forever or
timeout. It the timeout is triggered, a negative value is returned to the
shell.
</fo:block>
        </fo:block>
    </fo:block>
    <fo:block id="N20342"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">programmer's style guide</fo:marker><fo:block font-size="20.735999999999997pt">programmer's style guide</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
        
        <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
There are many specific programming patterns in Ivy. Some of them are Ivy
related, some are java related. See the jprobe source code to get an example
of some programming patterns. Here are some of them, to be completed later...
</fo:block>
        <fo:block id="N2034A"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">join the right bus</fo:marker><fo:block font-size="17.28pt">join the right bus</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
To join the right bus, you have to honor the IVYBUS property. It is a good way
to let the system get it, and an ever better way to override it with command
line options (e.g.: -b :3110). Here is a snippet to perform this task:
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20351">
import fr.dgac.ivy.* ;
import gnu.getopt.Getopt;

public static void main(String[] args) throws IvyException {
    Getopt opt = new Getopt("After",args,"b:"); // add more options ...
    String domain=Ivy.getDomain(null); // gets IVYDOMAIN from property
    // or, if none is set, defaults to Ivy.DEFAULT_DOMAIN
    while ((c = opt.getopt()) != -1) switch (c) {
      case 'b': domain=opt.getOptarg(); break; // overrides
      // and more options
      default: System.out.println(helpmsg); System.exit(0);
    }
    Ivy bus=new Ivy(name,name+" ready",null);
    bus.start(domain); // sets the properties for children processes ...
}
</fo:block>
            </fo:block>
        </fo:block>
        <fo:block id="N20356"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">nice regular expressions</fo:marker><fo:block font-size="17.28pt">nice regular expressions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
To avoid CPU consuming pattern matching operation, be sure to use bounded
regexps as much as possible. For instance, if we consider the regexp1 "^coord
x=(\d+)", the regexp2 "x=(\d+)" and the message msg "coord x=12 y=15". When
another agent sends the message msg, both regexp will match and trigger the
callback with on argument, the string "12". However, when another message is
sent, the regexp1 will fail as soon as possible, probably the very first
character, but the regexp2 will do some processing before failing.
</fo:block>
        </fo:block>
        <fo:block id="N2035F"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Something's not working</fo:marker><fo:block font-size="17.28pt">Something's not working</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
To trace the behaviour of an heavily multithread application is quite tedious,
especially when it's connected to others. The easiest path is to use the
built-in basic tracing mechanism provided by Ivy : run your jvm with the
-DIVY_DEBUG property set. Use jprobe to monitor what's going on with the
greedy regexp '(.*)' in a separate terminal. If in doubt, just join the Ivy mailing
list.
</fo:block>
        </fo:block>
        <fo:block id="N20368"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">time consuming callbacks</fo:marker><fo:block font-size="17.28pt">time consuming callbacks</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
For each remote agent, the Ivy object has an IvyClient with a dedicated
working thread. This thread deals with the Ivy protocol coding and decoding,
and performs the callbacks. If your agent has time consuming callbacks,
involving CPU, or long IO, or so, then it might be better to run each callback
in a dedicated thread. You can write this yourself, or just use the
<fo:inline font-family="monospace">Ivy.bindAsyncMsg()</fo:inline>
                 function. The problem is that there is
a slight overhead in thread management.
</fo:block>
        </fo:block>
        <fo:block id="N20374"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">how to perform requests</fo:marker><fo:block font-size="17.28pt">how to perform requests</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
When agent A needs to make a request to another agent B, you
can use the following pattern:
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="N2037B"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N2037D"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>B has subscribed to ^MyRequest ID=([^ ]+) QUERY=(.*)</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20383"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>A subscribes to ^MyResult ID=someSpecificId RESULT=(.*)</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20389"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>A send to MyRequest ID=someSpecificId QUERY=2+2</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N2038F"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>B receives, computes the results, then sends MyResult ID=someSpecificId RESULT=4</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20395"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
                        <fo:block>A receives, and unsubscribes to his subscription</fo:block>
                    </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
            </fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">To program this, you have to get a gentle way of choosing the
specificId, associate this to the subscription number returned by
Ivy.bindMsg(), and add code within the callback to perform the unsubscription.
Moreover, you have to be sure that there are not two "B type" agents on the
bus, otherwise you'll eventually perform your callback twice if the results
are sent during the short lapse of time before unsubscription.
</fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">The preferred way is to to let the API provide this singleton mechanism
with <fo:inline font-family="monospace">Ivy.getWBUID()</fo:inline>
                 function returning an unique ID, and
the <fo:inline font-family="monospace">Ivy.bindMsgOnce()</fo:inline>
                 that handles all the mechanisms
ensuring that the callback will be run on time only, and that the
unsubscription will take place.
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N203A8">
  String id = bus.getWBUID(); // a more or less unique ID
  bus.bindMsgOnce("MyResult ID="+id+" RESULT=(.*)",{
    public void receive(IvyClient ic,String[] args) {
      System.out.println("2+2="+args[0]);
      // the unsubscription is done for me
    }
  });
  bus.sendMsg("MyRequest ID="+id+" QUER=2+2");
</fo:block>
            </fo:block>
        </fo:block>
        <fo:block id="N203AD"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">how to quit the application ?</fo:marker><fo:block font-size="17.28pt">how to quit the application ?</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
            
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
If your application decides to quit or leave the bus, the safest way is to
invoque <fo:inline font-family="monospace">Ivy.stop()</fo:inline>
                . This will send a clean goodby message
to the other agents, close the sockets, end the threads, etc. However, you can
en the JVM performing a <fo:inline font-family="monospace">System.exit(int)</fo:inline>
                 and let the
other agents realize that you've gone.
</fo:block>
            <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
If some other agents wants you to quit the bus, it will send you a die
message. The protocol will first run you
<fo:inline font-family="monospace">IvyApplicationListener.die()</fo:inline>
                , if any, then
perform some socket/thread clean up, and disconnect you from the bus. As a
good citizen on the Ivy bus, you should take the appropriate measures top stop
your application within the <fo:inline font-family="monospace">IvyApplicationListener.die()</fo:inline>
                
method, for instance run <fo:inline font-family="monospace">System.exit()</fo:inline>
                 or make all you
thread stop, disposing your toplevel Swing Frames. Here is an example of how to do it:
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N203C6">
import fr.dgac.ivy.* ;
import javax.swing.*;

public class EndApp extends IvyApplicationAdapter {

  public static void main(String[] args) throws IvyException {
    Ivy bus=new Ivy("EndApp","EndApp ready",null);
    EndApp e = new EndApp(bus); // a frame is opened, and the Swing Thread is started
    bus.addApplicationListener(e);
    bus.start(Ivy.getDomain(null));  // Ivy threads are up and running
    // the control flow won't stop until the end of all above threads
  }

  private Ivy bus;
  JFrame f;

  public EndApp(Ivy b) {
    this.bus=b;
    f=new JFrame("test");
    f.getContentPane().add(new JLabel("some label"),java.awt.BorderLayout.CENTER);
    f.pack();
    f.setVisible(true);
  }

  public void die(IvyClient client, int id,String msgarg) {
    System.out.println("received die msg from " + client.getApplicationName());
    f.dispose(); // closes the only window, thus quitting the swing thread
  } // end of die callback, the Ivy threads are stopped

}
</fo:block>
            </fo:block>
        </fo:block>
    </fo:block>
    <fo:block id="N203CC"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Contacting the authors</fo:marker><fo:block font-size="20.735999999999997pt">Contacting the authors</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
        
        <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
For bug reports or comments on the library itself or about this document,
please me an email at <fo:inline font-family="monospace"><fo:inline hyphenate="false" keep-together.within-line="always">&lt;yannick.jestin@enac.fr&gt;</fo:inline></fo:inline>
            . For comments and ideas about Ivy itself (protocol, applications, etc), please join and use the 
<fo:basic-link external-destination="url(http://www.tls.cena.fr/products/ivy/contact.html)">Ivy mailing list</fo:basic-link><fo:inline hyphenate="false"> [<fo:basic-link external-destination="url(http://www.tls.cena.fr/products/ivy/contact.html)">http://www.tls.cena.fr/products/ivy/contact.html</fo:basic-link>]</fo:inline>
        </fo:block>
        <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
If you report a bug, try to identify the causal path leading to the
bug, and submit a trace of the problem, if possible, using the -DIVY_DEBUG
property to produce a trace of the ivy execution.
</fo:block>
    </fo:block>
</fo:flow></fo:page-sequence></fo:root>